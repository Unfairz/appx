---
# tasks file for VM Deployment

#############################################
#              AWX DEPLOY                   #
#############################################

- name: Notify Deployment begin
  slack:
    token: "{{ slack_token }}"
    msg: "AWX Deployment has begun. Your VM will be ready soon with name: {{ vm_name }} and specs: RAM - {{mem}} CPU - {{cpus}}"
    channel: '#general'

- name: Get VM disks
  command: "ls {{ vm_location }}"
  register: disks
  changed_when: "disks.rc != 0"
  become: yes

- name: Create a small VM disk
  become: yes
  command: >
           virt-builder --format qcow2 centos-7.6
           -o {{ vm_location }}/{{ vm_name }}.{{ file_type }}
           --root-password password:{{ root_pass }}
  when: vm_name not in disks.stdout

- name: Send Disk Created Notification  
  slack:
    token: "{{ slack_token }}"
    msg: "VM Disk successfully created!"
    channel: '#general'

- name: Get list of all VMs
  become: yes
  virt:
    command: "list_vms"
  register: vms

- name: Deploy VM
  become: yes
  command: >
           virt-install --import --name {{ vm_name }}
           --memory {{ mem }} --vcpus {{ cpus }}
           --disk {{ vm_location }}/{{ vm_name }}.{{ file_type }}
           --noautoconsole --os-variant {{ os_type }}
  when: vm_name not in vms

- name: Sleep for 30 seconds.
  shell: sleep 30

- name: Get VM IP
  become: yes
  shell: virsh domifaddr {{ vm_name }} |  awk '{print $4}' | tail -n 2 | head -n 1 | cut -d '/' -f 1
  register: ip

- name: Save VM IP
  become: yes
  set_fact:
    vm_ip: "{{ ip.stdout }}"

- name: Send VM IP
  slack:
    token: "{{ slack_token }}"
    msg: "AWX Deployment was completed. VM IP address is - {{ vm_ip }}. Adding iptables rules..."
    channel: '#general'

- name: generate random port
  become: yes
  shell: awk -v min=100 -v max=5666 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
  register: port

- name: facter random port
  become: yes
  set_fact:
    nat_port: "{{ port.stdout}}"

- name: NAT private IP
  become: yes
  shell: iptables -t nat -I PREROUTING -p tcp -d {{server_ip}} --dport {{nat_port}} -j DNAT --to-destination {{vm_ip}}:22 && iptables -I FORWARD -m state -d {{vm_ip}}/24 --state NEW,RELATED,ESTABLISHED -j ACCEPT

- name: save iptables rules
  become: yes
  shell: service iptables save

- name: send SSH instructions
  become: yes
  slack:
    token: "{{ slack_token }}"
    msg: "NAT Rules have been added. SSH using {{ vm_ip }} -p {{nat_port}}. Have fun!"
    channel: '#general'
